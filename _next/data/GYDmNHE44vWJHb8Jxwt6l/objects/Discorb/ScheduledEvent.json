{"pageProps":{"data":{"namespace":["Discorb","ScheduledEvent"],"parent":["Discorb","DiscordModel"],"type":"class","abstract":false,"docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"children":{"classes":["Metadata"],"modules":[]},"consts":[],"rattrs":[{"name":"id","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Discorb::Snowflake"],"description":"The ID of the event."}]},{"name":"name","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["String"],"description":"The name of the event."}]},{"name":"description","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["String"],"description":"The description of the event."}]},{"name":"scheduled_start_time","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Time"],"description":"The time the event starts."}]},{"name":"scheduled_end_time","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Time"],"description":"The time the event ends."}]},{"name":"privacy_level","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":[":guild_only"],"description":"The privacy level of the event."}]},{"name":"status","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":[":scheduled",":active",":completed",":canceled"],"description":"The status of the event."}]},{"name":"entity_type","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":[":stage_instance",":voice",":external"],"description":"The type of the event."}]},{"name":"entity_id","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Discorb::Snowflake"],"description":"The ID of the entity the event is for."}]},{"name":"metadata","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Discorb::ScheduledEvent::Metadata"],"description":"The metadata of the event."}]},{"name":"user_count","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Integer"],"description":"The user count of the event."}]},{"name":"guild","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[]},{"name":"channel","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Discorb::Channel","nil"],"description":"The channel of the event.\nOnly present if the event will do in stage instance or voice channel."}]},{"name":"creator","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Discorb::User"],"description":"The user who created the event.#"}]},{"name":"time","docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Range<Time>"],"description":"The time range of the event."}]}],"imethods":[{"docstring":{"text":"Create a scheduled event for the guild.","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[["Event#start","Event#start"],["Event#cancel","Event#cancel"],["Event#complete","Event#complete"]]},"name":"edit","parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Async::Task<Discorb::ScheduledEvent>"],"description":"The event that was created."}],"aliases":["modify"],"params":[{"class":[":stage_instance",":voice",":external"],"name":"type","required":false,"default":"Discorb::Unset","type":"keyword","description":"The type of event to create."},{"class":["String"],"name":"name","required":false,"default":"Discorb::Unset","type":"keyword","description":"The name of the event."},{"class":["String"],"name":"description","required":false,"default":"Discorb::Unset","type":"keyword","description":"The description of the event."},{"class":["Time"],"name":"start_time","required":false,"default":"Discorb::Unset","type":"keyword","description":"The start time of the event."},{"class":["Time","nil"],"name":"end_time","required":false,"default":"Discorb::Unset","type":"keyword","description":"The end time of the event. Defaults to `nil`."},{"class":["Discorb::Channel","Discorb::Snowflake","nil"],"name":"channel","required":false,"default":"Discorb::Unset","type":"keyword","description":"The channel to run the event in."},{"class":["String","nil"],"name":"location","required":false,"default":"Discorb::Unset","type":"keyword","description":"The location of the event. Defaults to `nil`."},{"class":[":guild_only"],"name":"privacy_level","required":false,"default":"Discorb::Unset","type":"keyword","description":"The privacy level of the event. This must be `:guild_only`."},{"class":[":active",":completed",":canceled"],"name":"status","required":false,"default":"Discorb::Unset","type":"keyword","description":"The status of the event."}],"flags":{"async":true}},{"docstring":{"text":"Starts the event. Shortcut for `edit(status: :active)`.","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"start","parent":[true,["Discorb","ScheduledEvent"]],"returns":[],"aliases":[],"params":[],"flags":{"async":false}},{"docstring":{"text":"Completes the event. Shortcut for `edit(status: :completed)`.","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"complete","parent":[true,["Discorb","ScheduledEvent"]],"returns":[],"aliases":["finish"],"params":[],"flags":{"async":false}},{"docstring":{"text":"Cancels the event. Shortcut for `edit(status: :canceled)`.","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"cancel","parent":[true,["Discorb","ScheduledEvent"]],"returns":[],"aliases":[],"params":[],"flags":{"async":false}},{"docstring":{"text":"Deletes the event.","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"delete!","parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Async::Task<void>"],"description":"The task."}],"aliases":["destroy!"],"params":[],"flags":{"async":true}},{"docstring":{"text":"Fetches the event users.","notes":["You can fetch all of members by not specifying a parameter."],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"fetch_users","parent":[true,["Discorb","ScheduledEvent"]],"returns":[{"class":["Async::Task<Array<Discorb::Member>>"],"description":"The event users."}],"aliases":["fetch_members"],"params":[{"class":["Integer"],"name":"limit","required":false,"default":"nil","type":"positional","description":"The maximum number of users to fetch. Defaults to `100`."},{"class":["#to_s"],"name":"after","required":false,"default":"nil","type":"keyword","description":"The ID of the user to start fetching from. Defaults to `nil`."},{"class":["#to_s"],"name":"before","required":false,"default":"nil","type":"keyword","description":"The ID of the user to stop fetching at. Defaults to `nil`."},{"class":["Boolean"],"name":"with_member","required":false,"default":"true","type":"keyword","description":"Whether to include the member object of the event. Defaults to `false`.\nThis should be used for manual fetching of members."}],"flags":{"async":true}},{"docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"eql?","parent":[false,["Discorb","DiscordModel"]],"returns":[{"class":["Boolean"],"description":""}],"aliases":[],"params":[],"flags":{"async":false}},{"docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"==","parent":[false,["Discorb","DiscordModel"]],"returns":[],"aliases":[],"params":[],"flags":{"async":false}},{"docstring":{"text":"","notes":[],"todo":[],"deprecated":[],"example":[],"see_also":[]},"name":"hash","parent":[false,["Discorb","DiscordModel"]],"returns":[],"aliases":[],"params":[],"flags":{"async":false}}],"cmethods":[]}},"__N_SSG":true}