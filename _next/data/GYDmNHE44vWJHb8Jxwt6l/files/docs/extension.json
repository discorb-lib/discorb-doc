{"pageProps":{"path":"docs/extension.md","data":{"title":"Extension"},"content":"<!--\n# @title Extension\n-->\n\n# Extension\n\nExtension allows you to seperate events.\n\n## Make a new extension\n\nMake a new class that includes Extension.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  # ...\nend\n```\n\n## Register Event\n\nUse {Discorb::Extension.event} to register event, or {Discorb::Extension.once_event} to register event only once.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  event :message do |message|\n    # ...\n  end\n\n  once_event :standby do |message|\n    # ...\n  end\nend\n```\n\nNote block will be binded to the extension instance.\n\n## Register Command\n\nUse `Discorb::Extension.command` to register command, see {Discorb::ApplicationCommand::Handler} for more information.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  slash(\"command\", \"Command\") do |interaction|\n    # ...\n  end\n\n  slash_group(\"group\", \"Group\") do |group|\n    group.slash(\"subcommand\", \"Subcommand\") do |interaction|\n      # ...\n    end\n\n    group.group(\"subgroup\", \"Subcommand group\") do |group|\n      group.slash(\"group_subcommand\", \"Command in Subcommand group\") do |interaction|\n        # ...\n      end\n    end\n  end\nend\n```\n\n\n## Load extension\n\nUse {Discorb::Client#load_extension} to load extension.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  event :message do |message|\n    # ...\n  end\nend\n\nclient.load_extension(MyExtension)\n```\n\n## Access Client from extension\n\nYou can access {Discorb::Client} from extension with `@client`.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  event :standby do |message|\n    puts \"Logged in as #{@client.user}\"\n  end\nend\n```\n\n## Receiving Arguments on load\n\nYou can receive arguments by adding some arguments to `#initialize`.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  def initialize(client, arg1, arg2)\n    super(client)\n    # @client = client will also work, but it's not recommended.\n    @arg1 = arg1\n    @arg2 = arg2\n  end\nend\n\nclient.load_extension(MyExtension, \"arg1\", \"arg2\")\n\n```\n\n## Do something on load\n\nYou can do something on load by overriding `.loaded`. Client and arguments will be passed to it.\n\n```ruby\nclass MyExtension\n  include Discorb::Extension\n\n  def self.loaded(client)\n    puts \"This extension is loaded to #{client}\"\n  end\nend\n```"},"__N_SSG":true}