{"pageProps":{"path":"docs/events.md","data":{"title":"Events"},"content":"<!--\n# @title Events\n-->\n\n# Events\n\n## How to use events\n\ndiscorb uses event driven programming.\nYou can register event handlers with {Discorb::Client#on}.\nAlternatively, you can use {Discorb::Client#once} to register a one-time event handler.\n\n```ruby\nclient.on :message do |event|\n  puts event.message.content\nend\n```\n\nThis example will print the content of every message received.\n\nSince v0.2.5, you can also register event handlers by adding a method to the client, with the prefix `on_` and the event name as the method name.\n\n```ruby\nclient = Discorb::Client.new\n\nclass << client\n  def on_standby\n    puts \"Ready!\"\n  end\nend\n```\n\nIf you want to seperate event handlers from the client, consider using {Discorb::Extension}. {file:docs/extension.md Learn more about extensions}.\n\nSince v0.6.1, you can set `:override` to `true` to register overridable event handlers.\n\n```ruby\nclient.on :message, override: true do |event|\n  puts \"This event handler is overrideable!\"\nend\n\nclient.on :message do |event|\n  puts \"Override!\"\nend\n```\n\nThis example will print `Override!`, but not `This event handler is overrideable!`.\nThis is useful for registering event handlers as default behaviour, such as error handlers.\n\n```ruby\n# In the library...\n\nclient.on :command_error, override: true do |event, error|\n  $stderr.puts \"Command error:\\n#{error.full_message}\"\nend\n\n# In your code...\n\nclient.on :command_error do |event, error|\n  event.message.reply \"An error occurred while executing the command!\\n#{error.full_message}\"\nend\n```\n\n## Event reference\n\n### Client events\n\n#### `event_receive(event_name, data)`\nFires when an event is received.  \n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event_name`| Symbol | The name of the event. |\n|`data`      | Hash   | The data of the event. |\n\n#### `ready()`\n\nFires when the client receives the `READY` event.\n\n#### `standby()`\n\nFires when the client is standby. (When the client connects to Discord, and has cached guilds and members.)\n\n#### `resumed()`\n\nFires when the client is resumed connection.\n\n#### `error(event_name, args, error)`\n\nFires when an error occurs during an event.\nDefaults to printing the error to stderr, override to handle it yourself.\n\n#### `setup()`\n\nFires when `discorb setup` is run.\nThis is useful for setting up some dependencies, such as the database.\n\n### Guild events\n\n#### `guild_join(guild)`\n\nFires when client joins a guild.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that was joined. |\n\n#### `guild_available(guild)`\n\nFires when a guild becomes available.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that became available. |\n\n#### `guild_update(before, after)`\n\nFires when client updates a guild.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`before`    | {Discorb::Guild} | The guild before the update. |\n|`after`     | {Discorb::Guild} | The guild after the update. |\n\n#### `guild_leave(guild)`\n\nFires when client leaves a guild.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that was left. |\n\n#### `guild_destroy(guild)`\n\nFires when guild is destroyed.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that was destroyed. |\n\n#### `guild_integrations_update(guild)`\n\nFires when guild integrations are updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that integrations were updated for. |\n\n#### `guild_ban_add(guild, user)`\n\nFires when a user is banned from a guild.\n\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that the user was banned from. |\n|`user`      | {Discorb::User}  | The user that was banned. |\n\n#### `guild_ban_remove(guild, user)`\n\nFires when a user is unbanned from a guild.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild} | The guild that the user was unbanned from. |\n|`user`      | {Discorb::User}  | The user that was unbanned. |\n\n### Channel events\n\n#### `channel_create(channel)`\n\nFires when a channel is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`channel`   | {Discorb::Channel} | The channel that was created. |\n\n#### `channel_update(before, after)`\n\nFires when a channel is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`before`    | {Discorb::Channel} | The channel before the update. |\n|`after`     | {Discorb::Channel} | The channel after the update. |\n\n#### `channel_delete(channel)`\n\nFires when a channel is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`channel`   | {Discorb::Channel} | The channel that was deleted. |\n\n#### `webhooks_update(event)`\n\nFires when a webhook is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::WebhooksUpdateEvent} | The webhook update event. |\n\n#### `thread_new(thread)`\n\nFires when a thread is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`thread`    | {Discorb::ThreadChannel} | The thread that was created. |\n\n#### `thread_join(thread)`\n\nFires when client joins a thread.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`thread`    | {Discorb::ThreadChannel} | The thread that was joined. |\n\n\n#### `thread_delete(thread)`\n\nFires when a thread is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`thread`    | {Discorb::ThreadChannel} | The thread that was deleted. |\n\n#### `thread_update(before, after)`\n\nFires when a thread is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`before`    | {Discorb::ThreadChannel} | The thread before the update. |\n|`after`     | {Discorb::ThreadChannel} | The thread after the update. |\n\n#### `thread_members_update(thread, added, removed)`\n\nFires when a thread's members are updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`thread`    | {Discorb::ThreadChannel} | The thread that the members were updated for. |\n|`added`     | Array<{Discorb::ThreadChannel::Member}> | An array of {Discorb::ThreadChannel::Member} objects that were added to the thread. |\n|`removed`   | Array<{Discorb::ThreadChannel::Member}> | An array of {Discorb::ThreadChannel::Member} objects that were removed from the thread. |\n\n#### `thread_member_update(before, after)`\n\nFires when a thread member is updated.\n\n| Parameter | Type  | Description |\n| --------- | ----- | ----------- |\n|`thread`   | {Discorb::ThreadChannel} | The thread that the member was updated for. |\n|`before`   | {Discorb::ThreadChannel::Member} | The thread member before the update. |\n|`after`    | {Discorb::ThreadChannel::Member} | The thread member after the update. |\n\n### Integration events\n\n#### `integration_create(integration)`\n\nFires when a guild integration is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`integration`| {Discorb::Integration}| The created integration. |\n\n#### `integration_update(after)`\n\nFires when a guild integration is updated.\n\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`after`     | {Discorb::Integration}| The integration after the update. |\n\n#### `integration_delete(integration)`\n\nFires when a guild integration is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`integration`| {Discorb::Integration}| The deleted integration. |\n\n### Message events\n\n#### `message(message)`\n\nFires when a message is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`message`   | {Discorb::Message}| The created message. |\n\n#### `message_update(event)`\n\nFires when a message is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::MessageUpdateEvent}| The message after the update. |\n\n#### `message_delete(message, channel, guild)`\n\nFires when a message is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`message`   | {Discorb::Message}| The deleted message. |\n|`channel`   | {Discorb::Channel}| The channel the message was deleted from. |\n|`guild`     | ?{Discorb::Guild} | The guild the message was deleted from. |\n\n##### Note\n\nThis will fire when cached messages are deleted.\n\n#### `message_delete_id(message_id, channel, guild)`\n\nFires when a message is deleted.\nNot like {file:#message_delete} this will fire even message is not cached.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`message_id`| {Discorb::Snowflake} | The deleted message ID. |\n|`channel`   | {Discorb::Channel}| The channel the message was deleted from. |\n|`guild`     | ?{Discorb::Guild} | The guild the message was deleted from. |\n\n#### `message_delete_bulk(messages)`\n\nFires when a bulk of messages are deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`messages`  | Array<{Discorb::Message}, {Discorb::Gateway::UnknownDeleteBulkMessage}> | The deleted messages. |\n\n#### `message_pin_update(event)`\n\nFires when a message is pinned or unpinned.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::MessagePinEvent}| The event object. |\n\n#### `typing_start(event)`\n\nFires when a user starts typing.\n\n| Parameter | Type  | Description |\n| --------- | ----- | ----------- |\n|`event`    | {Discorb::Gateway::TypingStartEvent}| The event object. |\n\n### Reaction events\n\n#### `reaction_add(event)`\n\nFires when a reaction is added to a message.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::ReactionEvent}| The event object. |\n\n#### `reaction_remove(event)`\n\nFires when someone removes a reaction from a message.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::ReactionEvent}| The event object. |\n\n#### `reaction_remove_all(event)`\n\nFires when all reactions are removed from a message.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::ReactionRemoveAllEvent}| The event object. |\n\n#### `reaction_remove_emoji(event)`\n\nFires when a reaction is removed from a message.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`event`     | {Discorb::Gateway::ReactionRemoveEmojiEvent}| The event object. |\n\n### Role events\n\n#### `role_create(role)`\n\nFires when a role is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`role`      | {Discorb::Role}| The created role. |\n\n#### `role_update(before, after)`\n\nFires when a role is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`before`    | {Discorb::Role}| The role before the update. |\n|`after`     | {Discorb::Role}| The role after the update. |\n\n#### `role_remove(role)`\n\nFires when a role is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`role`      | {Discorb::Role}| The deleted role. |\n\n### Member events\n\n#### Note\n\nThese events require the `guild_members` intent.\n\n#### `member_add(member)`\n\nFires when a member joins a guild.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`member`    | {Discorb::Member}| The member that joined. |\n\n#### `member_update(before, after)`\n\nFires when a member is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`before`    | {Discorb::Member}| The member before the update. |\n|`after`     | {Discorb::Member}| The member after the update. |\n\n#### `member_remove(member)`\n\nFires when a member is removed from a guild.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`member`    | {Discorb::Member}| The member that left. |\n\n### Role events\n\n#### `role_create(role)`\n\nFires when a role is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`role`      | {Discorb::Role}| The created role. |\n\n#### `role_update(before, after)`\n\nFires when a role is updated.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`before`    | {Discorb::Role}| The role before the update. |\n|`after`     | {Discorb::Role}| The role after the update. |\n\n#### `role_remove(role)`\n\nFires when a role is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`role`      | {Discorb::Role}| The deleted role. |\n\n### Invite events\n\n#### `invite_create(invite)`\n\nFires when an invitation is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`invite`    | {Discorb::Invite}| The created invite. |\n\n#### `invite_delete(invite)`\n\nFires when an invitation is deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`invite`    | {Discorb::Invite}| The deleted invite. |\n\n### Interaction events\n\n#### `button_click(interaction)`\n\nFires when a button is clicked.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`interaction`| {Discorb::MessageComponentInteraction::Button}| The interaction object. |\n\n#### `select_menu_select(interaction)`\n\nFires when a select menu is selected.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`interaction`| {Discorb::MessageComponentInteraction::SelectMenu}| The interaction object. |\n\n### Voice events\n\nBecause it's big, it's documented in {file:docs/voice_events.md}.\n\n### Guild scheduled event events\n\n#### `scheduled_event_create(event)`\n\nFires when a scheduled event is created.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n| `event`    | {Discorb::ScheduledEvent}| The created scheduled event. |\n\n#### `scheduled_event_cancel(event)`, `scheduled_event_delete(event)`\n\nFires when a scheduled event is canceled or deleted.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n| `event`    | {Discorb::ScheduledEvent}| The deleted scheduled event. |\n\n#### `scheduled_event_edit(before, after)`\n\nFires when a scheduled event is edited.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n| `before`   | {Discorb::ScheduledEvent}| The scheduled event before the edit. |\n| `after`    | {Discorb::ScheduledEvent}| The scheduled event after the edit. |\n\n#### `scheduled_event_start(event)`\n\nFires when a scheduled event is started.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n| `event`    | {Discorb::ScheduledEvent}| The scheduled event that started. |\n\n#### `scheduled_event_end(event)`\n\nFires when a scheduled event is ended.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n| `event`    | {Discorb::ScheduledEvent}| The scheduled event that ended. |\n\n### Low-level events\n\n#### `guild_create(guild)`\n\nFires when `GUILD_CREATE` is received.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild}| The guild of the event. |\n\n#### `guild_delete(guild)`\n\nFires when `GUILD_DELETE` is received.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`guild`     | {Discorb::Guild}| The guild of the event. |\n\n#### `thread_create(thread)`\n\nFires when `THREAD_CREATE` is received.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n|`thread`    | {Discorb::ThreadChannel}| The thread of the event. |\n\n#### `scheduled_event_update(before, after)`\n\nFires when `SCHEDULED_EVENT_UPDATE` is received.\n\n| Parameter  | Type  | Description |\n| ---------- | ----- | ----------- |\n| `before` | {Discorb::ScheduledEvent}| The scheduled event before the update. |\n|`after`     | {Discorb::ScheduledEvent}| The scheduled event after the update. |"},"__N_SSG":true}