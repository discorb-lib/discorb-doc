{"pageProps":{"path":"docs/application_command.md","data":{"title":"Application Commands"},"content":"<!--\n# @title Application Commands\n-->\n\n# Application Commands\n\n## What is an application command?\n\n> Application commands are commands that an application can register to Discord. They provide users a first-class way of interacting directly with your application that feels deeply integrated into Discord.\n\nFrom: [Discord API docs](https://discord.com/developers/docs/interactions/application-commands#application-commands)\n\n## How do I register an application command?\n\nWrite to your script:\n- {Discorb::ApplicationCommand::Handler.slash}, {Discorb::ApplicationCommand::Handler.slash_group} for slash commands,\n- {Discorb::ApplicationCommand::Handler.user_command} for user menu commands,\n- {Discorb::ApplicationCommand::Handler.message_command} for message menu commands.\n\nAnd then run `discorb setup` to register your application commands.\n{file:docs/cli/setup.md Learn more about `discorb setup`}. \n\n### Note\n\nTo register a global command, it will take 1 hour to be registered.\nGuild commands will be registered immediately.\n\n### Register Slash Commands\n\nThis example registers a slash command that says \"Hello, world!\" when the user types `/hello`.\n\n```ruby\nrequire \"discorb\"\n\nclient = Discorb::Client.new\n\nclient.slash(\"hello\", \"Greet for you\") do |interaction|\n  interaction.post(\"Hello World!\", ephemeral: true)\nend\n\nclient.run(ENV[\"DISCORD_BOT_TOKEN\"])\n```\n\n{Discorb::ApplicationCommand::Handler#slash} takes 5 arguments:\n\n| Argument | Description |\n|---------|-------------|\n| `command_name` | The name of the command. |\n| `description` | The description of the command. |\n| `options` | A hash of options. |\n| `guild_ids` | The ID of the guild to register the command in. |\n| `block` | A block that will be called when the command is invoked. |\n\nBlock will be called with a {Discorb::Interaction} object and specified options.\n\nIn `options`, hash should be like this:\n\n```ruby\n{\n  \"Name\" => {\n    type: :string,\n    required: true,\n    description: \"The description of the command.\"\n  }\n}\n```\n| Key | Type | Description |\n| --- | --- | --- |\n| `:description` | `String` | Description of the option. |\n| `:required` | Whether the argument is required. `optional` will be used if not specified. |\n| `:optional` | Whether the argument is optional. `required` will be used if not specified. |\n| `:type` | `Object` | Type of the option. |\n| `:choice` | `Hash{String => String, Integer, Float}` | Choice of the option. |\n| `:default` | `Object` | Default value of the option. |\n| `:channel_types` | `Array<Class<Discorb::Channel>>` | Type of the channel option. |\n| `:autocomplete` | `Proc` | Autocomplete function. |\n| `:range` | `Range` | Range of the option. Only valid for numeric options. (`:int`, `:float`) |\n\n`choices` should be unspecified if you don't want to use it.\n`choices` is hash like this:\n\n```ruby\n{\n  \"vocaloid\" => {\n    required: true,\n    description: \"The vocaloid which you like.\",\n    type: :string,\n    choices: {\n      \"Hatsune Miku\" => \"miku\",\n      \"Kagamine Rin\" => \"rin\",\n      \"Kagamine Len\" => \"len\",\n      \"Megurine Luka\" => \"luka\",\n      \"MEIKO\" => \"meiko\",\n      \"KAITO\" => \"kaito\",\n    }\n  }\n}\n\n# Note: This aritcle is written in 8/31.\n```\n\nThe key will be displayed in the user menu, and the value will be used as the argument.\n\nIn `type`, You must use one of the following:\n\n| Name | Description | Aliases|\n| --- | --- | --- |\n| `:string` | String argument. | `:str` |\n| `:integer` | Integer argument. | `:int` |\n| `:float` | Float argument. | None |\n| `:boolean` | Boolean argument. | `:bool` |\n| `:user` | User argument. | `:member` |\n| `:channel` | Channel argument. | None |\n| `:role` | Role argument. | None |\n\n#### Group Slash Commands\n\nTo register a group of slash commands, use {Discorb::ApplicationCommand::Handler#slash_group}.\n\n```ruby\ngroup = client.slash_group(\"settings\", \"Set settings of bot.\")\n\ngroup.slash(\"message_expand\", \"Whether bot should expand message.\", {\n  \"enabled\" => {\n    type: :boolean,\n    description: \"Whether bot should expand message.\"\n  }\n}) do |interaction, enabled|\n  # ...\nend\n\ngroup.slash(\"level\", \"Whether level system is enabled.\", {\n  \"enabled\" => {\n    type: :boolean,\n    description: \"Whether level system is enabled.\"\n  }\n}) do |interaction, enabled|\n  # ...\nend\n\n```\n\nSince v0.5.1, You can use block for register commands.\n\n```ruby\n\nclient.slash_group(\"settings\", \"Set settings of bot.\") do |group|\n  group.slash(\"message_expand\", \"Whether bot should expand message.\", {\n    \"enabled\" => {\n      type: :boolean,\n      description: \"Whether bot should expand message.\"\n    }\n  }) do |interaction, enabled|\n    # ...\n  end\n  group.slash(\"bump_alert\", \"Whether level system is enabled.\", {\n    \"enabled\" => {\n      type: :boolean,\n      description: \"Whether level system is enabled.\"\n    }\n  }) do |interaction, enabled|\n    # ...\n  end\nend\n```\n\nYou can make subcommand group by using {Discorb::ApplicationCommand::Command::GroupCommand#group}.\n\n```ruby\ngroup = client.slash_group(\"permission\", \"Set/Get command permissions.\")\n\ngroup_user = group.group(\"user\", \"Set/Get user's command permissions.\")\n\ngroup_user.slash(\"set\", \"Set user's command permissions.\", {\n  \"user_id\" => {\n      type: :user,\n      description: \"The user.\"\n  },\n  \"value\" => {\n      type: :boolean,\n      description: \"Whether the user can use the command.\"\n  }\n}) do |interaction, user|\n  # ...\nend\n\ngroup_user.slash(\"get\", \"Set user's command permissions.\", {\n    \"user_id\" => {\n        type: :user,\n        description: \"The user.\"\n    },\n}) do |interaction, user|\n  # ...\nend\n\ngroup_user = group.group(\"user\", \"Set/Get user's command permissions.\")\n\ngroup_user.slash(\"set\", \"Set user's command permissions.\", {\n    \"user_id\" => {\n        type: :user,\n        description: \"The user.\"\n    },\n    \"value\" => {\n        type: :boolean,\n        description: \"Whether the user can use the command.\"\n    }\n}) do |interaction, user|\n  # ...\nend\n\ngroup_user.slash(\"get\", \"Set user's command permissions.\", {\n    \"user_id\" => {\n        type: :user,\n        description: \"The user.\"\n    },\n}) do |interaction, user|\n  # ...\nend\n\ngroup_role = group.group(\"role\", \"Set/Get role's command permissions.\")\n\ngroup_role.slash(\"set\", \"Set role's command permissions.\", {\n    \"role_id\" => {\n        type: :role,\n        description: \"The role.\"\n    },\n    \"value\" => {\n        type: :boolean,\n        description: \"Whether the role can use the command.\"\n    }\n}) do |interaction, role|\n  # ...\nend\n\ngroup_role.slash(\"get\", \"Set role's command permissions.\", {\n    \"role_id\" => {\n        type: :role,\n        description: \"The role.\"\n    },\n}) do |interaction, role|\n  # ...\nend\n\n```\n\nSame as above, you can use block for register commands since v0.5.1.\n\n#### Use Auto Completing\n\nSince v0.11.0, you can use auto-completion by setting Proc to `:autocomplete` in options.\nThe proc will be called with interaction object and the argument.\nThe proc should return a hash of the autocomplete result.\n\n```ruby\nclient.slash(\"hello2\", \"Greet for you\", {\n  \"target\" => {\n    type: :string,\n    description: \"Person to greet\",\n    autocomplete: ->(interaction, target) {\n      {\n        \"You\" => interaction.target.to_s\n      }\n    },\n  },\n}) do |interaction, target|\n  interaction.post(\"Hello, #{target}!\")\nend\n```\n\nIn the above example, `You` will be displayed in the user menu.\nDue to the limitation of Discord API, the proc must return the result in less than 3 second.\n\n### Register User Context Menu Command\n\n```ruby\nclient.user_command(\"hello\") do |interaction, user|\n  interaction.post(\"Hello, #{user.name}!\")\nend\n```\n{Discorb::ApplicationCommand::Handler.user_command} takes 3 arguments:\n\n| Parameter | Description |\n| --- | --- |\n| `command_name` | The name of the command. |\n| `guild_ids` | The ID of the guild to register the command in. |\n| `block` | A block that will be called when the command is invoked. |\n\n`block` will be called with two arguments:\n\n| Parameter | Description |\n| --- | --- |\n| `interaction` | The interaction object. |\n| `user` | The user object. |\n\n\n### Register Message Context Menu Command\n\n```ruby\nclient.message_command(\"Bookmark\") do |interaction, message|\n  # ...\nend\n```\n\n{Discorb::ApplicationCommand::Handler.message_command} takes 3 arguments:\n\n| Parameter | Description |\n| --- | --- |\n| `command_name` | The name of the command. |\n| `guild_ids` | The ID of the guild to register the command in. |\n| `block` | A block that will be called when the command is invoked. |\n\n`block` will be called with two arguments:\n\n| Parameter | Description |\n| --- | --- |\n| `interaction` | The interaction object. |\n| `message` | The message object. |\n"},"__N_SSG":true}